<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on 狐耳的雪原</title>
    <link>https://hueralin.github.io/categories/react/</link>
    <description>Recent content in React on 狐耳的雪原</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Oct 2019 15:53:24 +0800</lastBuildDate>
    
	<atom:link href="https://hueralin.github.io/categories/react/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>对Redux的理解</title>
      <link>https://hueralin.github.io/2019/redux-sourcecode/</link>
      <pubDate>Tue, 15 Oct 2019 15:53:24 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/redux-sourcecode/</guid>
      <description>最近根据网课实现了一遍Redux，现在来说下自己的理解，myRedux
React产生的原因 或者说，我为什么使用Redux。在我编写Redux代码的过程中遇到的最棘手的问题就是共享状态，不仅仅是组件传值，组件传值是发生在父子组件等具有嵌套关系的情况下，而在兄弟组件甚至什么关系都扯不上的组件之间，只能称为共享状态。在Redux未出现前，父子组件传值靠的是props，在层级非常深的情况下，这种方法就显得非常麻烦。另外一种父子组件传值的方法就是Context，Context 提供了一种在组件之间传递状态的方式，而不必显式地通过组件树的逐层传递props。虽然它也可以用于组件传值，但这并不是它的本职工作。Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，即共享数据。而组件传值发生在父子组件，祖先和孙子组件之间，也就是说这种情况下的作用范围比较小（局部的），还可能有交叉的情况，this.context的指向就已经很模糊了，若有好多地方都这么用的话，也是一场灾难。也就是说Context方法使数据变得混乱、分散。（据说最新的Context API非常好用&amp;hellip;&amp;hellip;😂）
Redux Redux是一个不依赖于任何前端框架的JS状态管理库，Redux的思想是将应用的所有状态放在一起，集中管理，也就是放在全局。任何组件都不能直接修改状态，必须通过store对象的dispatch方法去发送一个action指令，通知reducer按照指令修改store中的状态。网课上实现的方式用闭包实现的单例模式，将state封装在store内部，向外暴露了三个API，分别是getState、dispatch、subscribe。订阅状态用subscribe、获取状态用getState、修改状态用dispatch。
createStore store是一个状态管理仓库，通过createStore方法创建。该方法创建了个闭包，返回一个store对象，里面包含上述三个方法来实现对状态的管理。单纯的使用Redux，就是在入口文件创建一个store，作为全局的状态仓库。 其他组件需要访问状态的话就将其导入进组件，使用API访问。
action action即指令，一个含有type属性的对象。type指明的是这个命令的内容或目的，表明这个命令是干嘛的。为什么这么设计呢？我认为是为了保证状态的安全性，因为指令是用户（程序员）发出的，万一这个指令不合法（可能是误操作），可能会对state造成破坏，同时type的设置也让指令更加语义化。
reducer reducer是一个纯函数，它接收旧状态和action，返回新状态。reducer是唯一一个有权修改状态的人，dispatch发送完指令后会调用它，让reducer来执行指令，reducer会做一次检查，即使用switch来匹配相应的action，执行对应的操作，若没有则返回旧对象（防止不合法的指令）。最后，当状态修改完毕后，通知所有的订阅者更新视图。
dispatch dispatch是一个发送指令的操作，即指令分发器。任何状态的修改必须调用该函数，尽管该函数不能直接修改状态。
subscribe subscribe是订阅函数，订阅状态的变化。它的参数是一个回调函数，当状态变化时就会调用它。在网课中的实现，这个回调函数是一个固定的写法。当状态变化时我们做什么？当然是重新渲染页面！于是这个回调函数就是这样的：
subscribe(() =&amp;gt; { this.setState({ number: store.getState().number }) })  调用setState触发重新渲染，完成了一次store到state的映射。
combineReducers combineReducers是一个合并reducer的函数。reducer接收旧状态和action，返回新状态。reducer函数接收的state有一个默认值，我们可以认为reducer是状态的起点，或者说状态是在这里初始化的。也就是说状态和reducer是相关的，该reducer里面的指令都是对这个状态进行的操作。而我们一般有很多的业务逻辑，会涉及到很多的状态，如果我们都放在一起，那么代码会非常混乱，文件也比较大。因此我们按照业务逻辑划分reducer，让它操作不同的状态。这样分而治之，我们可以给createStore传入不同的reducer来创建不同的store，的确使代码变得简洁大方，业务逻辑清晰。但是我们Redux的初衷是将状态集中起来管理，而我们上述操作违背了这一原则。我们好不容易分开了，为什么要合并回去呢？其实我们最终要的是合并后的单一的store，我们拆分出来只是为了逻辑清晰。combineReducers函数接受一个对象，键为reducer名，值为reducer函数，combineReducers函数返回一个合并后的reducer，这个reducer最终合并出了一个单一的store。具体的操作方法为，初始化一个合并后的state，遍历传入的对象，执行对应的reducer返回各个业务逻辑的state，并以reducer名为键存入合并后的对象中，最后combineReducers返回这个合并后的对象。
react-redux react-redux是redux的react版，我们开发React应用一般使用这个，react-redux只是在原有的redux上进行扩展。
当我们在组件中使用Redux时，会发现有许多操作是重复的。例如：store到state的映射，组件挂载前设置订阅函数，组件销毁时取消订阅，react-redux将这些操作通过一个connect函数封装了起来。
而且我们之前使用Redux的时候，是将创建的store在各个需要的地方导入，虽然和我们每个组件都要导入React一样，但我们仍需要将其集中在一个地方（如果可以的话，我也不愿意每次都导入React）。react-redux使用一个Provider组件将store放在最顶层，并向下传递。
connect connect函数是一个高阶函数，参数为mapStateToProps函数和mapDispatchToProps函数，返回值也是一个函数。这个返回的函数以一个组件为参数，返回包装后的组件。代码如下：
import { store } from &#39;./store&#39; let connect = (mapStateToProps, mapDispatchToProps) =&amp;gt; { return (Component) =&amp;gt; { // 创建一个容器组件 class Container extends React.Component { constructor(props) { super(props) this.state = {} } componentWillMount() { this.</description>
    </item>
    
    <item>
      <title>技术分享之Redux思想</title>
      <link>https://hueralin.github.io/2019/share/</link>
      <pubDate>Wed, 18 Sep 2019 13:40:10 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/share/</guid>
      <description>Redux 普通的状态管理 // 状态 let state = { // 计数 count: 0 }··· // 修改状态 state.count = 1 // 获取状态 console.log(state.count)  缺点：状态改变，依赖状态的地方得不到通知
带有发布订阅的状态管理 // 状态 let state = { // 计数 count: 0 } // 集中管理订阅 let listeners = [] // 订阅函数 function subscribe(callback) { listeners.push(callback) } // 修改状态的函数 function changState(newVal) { state.count = newVal for(let i=0;i&amp;lt;listeners.length;i++){ listeners[i]() } } // main subscribe(() =&amp;gt; { console.log(&#39;count&#39;, state.count) }) changState(1) // 1 changState(2) // 2 changState(3) // 3  缺点：只对count（即单个状态）有效，应将公共操作封装起来。</description>
    </item>
    
    <item>
      <title>React组件中的函数this绑定</title>
      <link>https://hueralin.github.io/2019/bind/</link>
      <pubDate>Tue, 20 Aug 2019 11:04:35 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/bind/</guid>
      <description>实习项目遇到的问题 关于函数this绑定！ 最近在React项目中遇到了关于函数this绑定的问题，因为在普通函数（诸如:function(){xxx}）中，this的绑定是动态的，在被执行时才会确定。若这些普通函数在自身组件内使用一般不会有太大的问题，然而一旦被当作参数（例如事件处理函数）传递到其他组件时，this就会绑定为其他组件的实例，在获取原实例的状态时就会发生错误。
箭头函数的this绑定和普通函数不一样，它是静态绑定的，也就是说箭头函数的this绑定是在定义时绑定的，即定义箭头函数时所处的作用域的this。所以说如果React组件中的函数是用箭头函数的形式定义的话，就不用担心this绑定的问题。
假如你的onClick事件处理函数在被触发时需要传参，如果直接 onClick={this.handleClick(xxx)} 话，onClick得到的就不是函数，而是函数返回的结果，所以应使用 onClick={() =&amp;gt; this.handleClick(xxx)} ，即给onClick一个箭头函数作为事件处理函数，那么this就绑定为了当前组件的实例，调用的普通函数也不用做特殊的处理。
我犯了一个最基础也最致命的问题，在渲染中进行了状态的改变！按理说我不应该会犯这种错误，我犯这种错误的原因就是我将箭头函数和普通函数结合使用（模仿的项目中的老代码）：
handleInput(key) { return (e) =&amp;gt; { let inputValue = {} inputValue[key] = e.target.value this.setState({ data: Object.assign({}, this.state.data, inputValue) }) } } onChange={this.handleInput(xxx)}  看出和之前 onClick={() =&amp;gt; this.handleClick(xxx)} 的不同了么？
这里是由普通函数将箭头函数return了出来，所以函数渲染时立即执行handleInput，并将执行后的箭头函数传给onChange，顺便完成this绑定，Emmmm，秀啊！可惜当初我没搞懂这个用意，将handleInput彻底改成了普通函数，导致在渲染时执行了this.setState()，浏览器不停的改变状态和渲染，瞬间报错0～20000+，不得不强制杀死浏览器进程&amp;hellip;&amp;hellip;
总结React组件中的函数this绑定的几种方法 一、每当作为事件处理函数时，例如：onClick onChange 等，都手动绑定一次
// 这种方法的好处是在绑定this的同时能传递参数 onClick={this.handleClick.bind(this, args)} // 缺点是，每次都得手动调用bind()  二、在构造函数中绑定一次，一劳永逸
// 缺点是不能传递参数 this.handleCLick = this.handleClick.bind(this)  三、React组件的函数直接定义成箭头函数
handleClick = (args) =&amp;gt; {xxxxx} // 缺点也是不能传递参数   上述三个做法有个矛盾，就是“一次绑定”和“传递参数”不能兼顾</description>
    </item>
    
    <item>
      <title>React_router配置</title>
      <link>https://hueralin.github.io/2019/react_router/</link>
      <pubDate>Mon, 05 Aug 2019 14:24:46 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/react_router/</guid>
      <description>最近在学习React-router遇到了一些问题，在此记录一下：
目前成功的配置为：
app.jsx
import React from &#39;react&#39; import ReactDOM from &#39;react-dom&#39; import { HashRouter as Router, Route } from &#39;react-router-dom&#39; import Content from &#39;./components/Content.jsx&#39; import About from &#39;./components/About.jsx&#39; import Posts from &#39;./components/Posts.jsx&#39; import Post from &#39;./components/Post.jsx&#39; ReactDOM.render( &amp;lt;Router&amp;gt; &amp;lt;Content&amp;gt; &amp;lt;Route path=&#39;/about&#39; component={About}&amp;gt;&amp;lt;/Route&amp;gt; &amp;lt;Route path=&#39;/posts&#39; component={Posts}&amp;gt;&amp;lt;/Route&amp;gt; &amp;lt;Route path=&#39;/posts/:id&#39; component={Post}&amp;gt;&amp;lt;/Route&amp;gt; &amp;lt;/Content&amp;gt; &amp;lt;/Router&amp;gt;, document.getElementById(&#39;app&#39;) )  Content.jsx
import React from &#39;react&#39; import { Link } from &#39;react-router-dom&#39; class Content extends React.Component { render () { return &amp;lt;div&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;&amp;lt;Link to=&#39;/&#39;&amp;gt;主页&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;Link to=&#39;/posts&#39;&amp;gt;博文&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;Link to=&#39;/about&#39;&amp;gt;关于&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; {this.</description>
    </item>
    
    <item>
      <title>HOC---高阶组件</title>
      <link>https://hueralin.github.io/2019/hoc/</link>
      <pubDate>Sat, 27 Jul 2019 12:37:17 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/hoc/</guid>
      <description>推荐文章：助你完全理解React高阶组件（Higher-Order Components）
简单讲，高阶组件就是一个函数，以组件为参数，返回另一个组件。
高阶组件的目的就是为了复用，可能有很多人不理解，“组件不就是用来复用的么，为什么还要出来一个高阶组件呢？”。
举个例子，有这么一个需求：</description>
    </item>
    
    <item>
      <title>用webpack搭建简易的React应用</title>
      <link>https://hueralin.github.io/2019/createreactwithwebpack/</link>
      <pubDate>Sun, 21 Jul 2019 00:19:54 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/createreactwithwebpack/</guid>
      <description>Emmm,步骤清单😂
 npm init -y
 npm i webpack webpack-cli webpack-dev-server --save-dev
 npm i react react-dom --save
 npm i babel-core babel-loader@7 babel-preset-es2015 babel-preset-react --save-dev
需要安装的包差不多就这些了，接下来配置webpack.config.js文件
  module.exports = { entry: &amp;quot;./index.jsx&amp;quot;, output: { path: __dirname + &amp;quot;/public&amp;quot;, filename: &amp;quot;bundle.js&amp;quot; }, module: { rules: [ { test: /\.jsx$/, loader: &amp;quot;babel-loader&amp;quot; } ] }, devServer: { contentBase: &amp;quot;./public&amp;quot; } }   在package.json文件中添加脚本
5.1. &amp;quot;build&amp;quot;: &amp;quot;webpack&amp;quot;打包
5.2. &amp;quot;dev&amp;quot;: &amp;quot;webpack-dev-server --open --inline&amp;quot;启动测试服务器</description>
    </item>
    
  </channel>
</rss>