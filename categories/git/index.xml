<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on 狐耳的雪原</title>
    <link>https://hueralin.github.io/categories/git/</link>
    <description>Recent content in Git on 狐耳的雪原</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Jul 2019 17:41:51 +0800</lastBuildDate>
    
	<atom:link href="https://hueralin.github.io/categories/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git Reset</title>
      <link>https://hueralin.github.io/2019/gitreset/</link>
      <pubDate>Fri, 26 Jul 2019 17:41:51 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/gitreset/</guid>
      <description>惊了！本来想撤销上一次commit，但保留工作区的修改，但是手残加了 &amp;ndash;hard 参数，修改全没了！！！
后来，运行了一遍git reflog branchName, 查看了下该分支上的历史记录，找到reset操作之前的历史，执行git reset --hard reset之前的记录点回来了！！！
回来了！！！！ Git取消对某个文件的跟踪
1. git rm --cached readme.md 删除readme.md的跟踪，并保留在本地。 2. git rm --f readme.md 删除readme.md的跟踪，并且删除本地文件。</description>
    </item>
    
    <item>
      <title>Git分支</title>
      <link>https://hueralin.github.io/2019/gitbranch/</link>
      <pubDate>Fri, 26 Jul 2019 16:45:41 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/gitbranch/</guid>
      <description>分支就是一个指向单个commit的指针
分支基本操作：
1. 分支改名：git branch -m oldName newName
2. 删除分支：git branch -d feature
3. 从master签出feature：git checkout -b feature master
4. 查看本地分支：git branch
5. 查看远程分支：git branch -r
6. 查看所有分支：git branch -a
7. 合并分支：git merge B 要想将B分支合并到A分支，首先要切换回A分支，在执行merge命令</description>
    </item>
    
    <item>
      <title>Git pull 的使用</title>
      <link>https://hueralin.github.io/2019/gitpull/</link>
      <pubDate>Tue, 23 Jul 2019 14:37:19 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/gitpull/</guid>
      <description>语法：git pull &amp;lt;选项&amp;gt; &amp;lt;远程主机名&amp;gt; &amp;lt;远程分支名&amp;gt;:&amp;lt;本地分支名&amp;gt;
 注意：和git push的语法顺序稍有不同
git push 的语法为：git pull &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支名&amp;gt;:&amp;lt;远程分支名&amp;gt;
git pull 意为从远程分支的最新版本拉取下来并于本地分支合并
 git pull origin master:dev 将origin的master分支拉取并合并到本地的dev分支
 git pull origin master 省略了本地分支名，即拉取并合并到本地分支
 git pull origin 若有 某远程分支与当前分支有追踪关系，则远程分支名也可以省略
 git pull 若只有一个远程主机，且只有一个远程分支与当前分支有追踪关系，则可以直接git pull
  git pull相当于git fetch和git merge的简写
比如：git pull origin dev 相当于 git fetch origin dev + git merge origin/dev
未完待续&amp;hellip;</description>
    </item>
    
    <item>
      <title>Fork工作流</title>
      <link>https://hueralin.github.io/2019/fork/</link>
      <pubDate>Tue, 23 Jul 2019 10:34:46 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/fork/</guid>
      <description>Fork工作流 实现协同开发
作为实习新人，在参与公司项目的开发时被要求使用Fork工作流，Fork工作流实际上就是从GitHub上fork一个原仓库，并与原仓库代码保持同步的一种工作方式。
Fork工作流不再是只有一个中央代码库，而是给予每个人一个远程仓库（origin），外加一个唯一的中央仓库（upstream，或称为官方仓库）。点击Fork时就会生成一个自己的远程仓库，每次开发者提交时都会先将自己的贡献提交到origin，然后发起一个Pull Request请求给中央仓库，中央仓库的管理者会决定是否将你的代码提交到中央仓库，其他人都没这个权限。这使得管理者可以接受任何人的提交，而不需要给它们中央仓库的权限。
具体流程
1. 从原仓库fork到自己的origin
2. git clone xxxxxx 将origin克隆到本地
3. git remote add upstream xxxxx 指向上游仓库，即原仓库
4. git checkout -b feature-xx origin/dev 从远程分支检出本地分支进行开发
5. 开发、修改。。。。提交。。。
6. git push origin feature-xx 将本地feature分支push到origin
7. 发起Pull Request请求管理员合并
8. 上述合并可能会导致冲突，因为本地仓库可能比较旧了，需要更新
9. git checkout dev 切回dev分支
10. git pull upstream dev 从原仓库拉取dev分支的最新版本,更新本地的dev分支
11. git checkout -b feature-merge-dev dev 从更新后的本地dev检出合并分支，并切换为该分支
12. git merge feature-xx 合并你的修改，即feature-xx分支上的内容
13. git branch -m feature-merge-dev feature-xx 将合并分支改名为feature-xx 覆盖原分支</description>
    </item>
    
    <item>
      <title>Git push 的使用</title>
      <link>https://hueralin.github.io/2019/gitpush/</link>
      <pubDate>Mon, 22 Jul 2019 14:32:37 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/gitpush/</guid>
      <description>语法：git push &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支名&amp;gt; ：&amp;lt;远程分支名&amp;gt;
  git push origin master
最常用的一个写法，忽略了远程分支名，将本地master分支推送到origin中与之有追踪关系的对应分支（通常同名），若没有则创建一个对应的远程分支。
 git push origin :master
忽略了本地分支名，意味着要推送一个本地的空分支到指定远程分支，即删除指定的远程分支，相当于git push origin --delete master
 git push origin
如果当前分支和远程分支存在对应关系，则两个分支名都可省略掉，直接推送当前分支到对应的远程分支。
 git push
如果只有一个远程主机，且只有一个与当前分支对应的远程分支，那么就可以全都省略，直接git push。
 git push -u origin master
如果对应多个远程主机，-u 则指定一个默认主机，以后就可以直接使用git push推送当前分支到远程对应分支。
 git push &amp;ndash;all origin
不管是否存在对应的远程分支，将本地的所有分支全部推上去。
 git push &amp;ndash;force origin
一般情况下本地仓库比远程仓库旧的话会要求你先git pull进行更新，而 &amp;ndash;force 表明不要更新，直接推上去。
 git push origin &amp;ndash;tags
不推送分支，只推送标签。
&amp;mdash;
关于追踪关系
追踪即本地分支跟进远程分支的变化，用于push、pull、merge等&amp;hellip;
追踪远程分支
 git clone 一般克隆下来的项目将自动创建master分支，并且自动关联到远程的master分支上</description>
    </item>
    
  </channel>
</rss>