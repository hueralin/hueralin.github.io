<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>随便学学 on 狐耳的雪原</title>
    <link>https://hueralin.github.io/categories/%E9%9A%8F%E4%BE%BF%E5%AD%A6%E5%AD%A6/</link>
    <description>Recent content in 随便学学 on 狐耳的雪原</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Oct 2019 13:27:32 +0800</lastBuildDate>
    
	<atom:link href="https://hueralin.github.io/categories/%E9%9A%8F%E4%BE%BF%E5%AD%A6%E5%AD%A6/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>call, apply, bind</title>
      <link>https://hueralin.github.io/2019/callapplybind/</link>
      <pubDate>Sun, 06 Oct 2019 13:27:32 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/callapplybind/</guid>
      <description>call apply bind 这三个函数的作用都是将一个函数的this指向另一个对象，使得该对象可以调用这个它自身没有的函数。
 Func.call(thisObj, [arg1,arg2,&amp;hellip;.]) thisObj 作为Func内部的this，它的取值有四种情况：
1. null/undefined/不传 Func的this &amp;mdash;-&amp;gt; window
2. 函数名 Func的this &amp;mdash;-&amp;gt; 该函数的引用
3. 数值/字符串/布尔值 Func的this &amp;mdash;-&amp;gt; Number/String/Boolean
4. 对象 Func的this &amp;mdash;-&amp;gt; 对象
function Func(){ console.log(this) } function Test(){console.log(&#39;Test&#39;)} var obj = { name: &#39;huer&#39; } Func.call() // window Func.call(null) // window Func.call(undefined) // window Func.call(Test) // Test(){console.log(&#39;Test&#39;)} Func.call(666) // Number {666} Func.call(&#39;666&#39;) // String {&amp;quot;666&amp;quot;} Func.call(true) // Boolean {true} Func.call(obj) // {name: &amp;quot;huer&amp;quot;}  这三个函数除了由上面的功能外，还有一个功能。还能给对象添加新属性，例如在继承中：</description>
    </item>
    
    <item>
      <title>JS 事件循环</title>
      <link>https://hueralin.github.io/2019/eventloop/</link>
      <pubDate>Mon, 02 Sep 2019 18:56:56 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/eventloop/</guid>
      <description>MDN 事件循环
详细的不知道该给这个链接命什么名好!
Ahhhhhh, 这JS学的，不断刷新世界观~
事件循环可谓是JS中的一大重点，如果说之前的JS执行环境从微观角度上说明了函数内部的执行原理，那么事件循环则从宏观角度上说明了整个JS代码的执行情况。
事件循环中的关键概念：执行栈、任务源、任务队列
执行栈 由于JS是单线程的，一定时间内只能执行一个函数，所以这些函数就得按照一定的顺序排好队，但它并不是一个队列，因为函数调用会涉及到作用域链的问题，函数调用之间有着一定的嵌套关系，所以栈结构比较合适。那么由函数调用组成的栈，也被称为 “执行栈” ，函数被调用时压入栈，执行完毕弹出栈。结合 JS执行环境 中所讲的内容，函数调用栈中的每一个帧都是一个执行环境，执行环境里面包含着变量对象（函数被调用时才会有）。
任务源 这个高大上的名词可能没见过，但是它本身却很常见。顾名思义，任务源就是分发任务的源头，绝大部分是异步任务。分发异步任务的源头有哪些呢？setTimeout ！setInterval ! promise !等等都是任务源，这些函数在被执行的时候都是立即执行的，但是它们所分发的任务需要在特定的情况下才会被执行，而这些特定的环境则需要事件循环机制来处理。任务源所分发的任务才会被放进任务队列中。
任务队列 MDN 上叫“消息队列”，好像是从前的说法，讲的有些笼统。新标准下给了它们新的名字：任务队列，给异步任务做了更细致的划分。任务队列分为：“宏任务”和“微任务”。 宏任务包括：script(整体代码), setTimeout, setInterval, setImmediate, I/O, UI渲染。微任务包括：process.nextTick，Promise, Object.observe(已废弃), MutationObserver(html5新特性)。
推荐两篇博客：
深入浅出JS事件循环机制（上）
深入浅出JS事件循环机制（下）
上面两篇博客涉及到了WebpAPIs，文中给出了三种常见的WebAPIs，DOM相关、网络相关、定时器相关。
下面用一个简单的例子来说明：
现在开始执行JS代码，main()入栈，执行到console.log()，log函数入栈，执行log函数，控制台输出&amp;rsquo;Hello world!&amp;rsquo; log函数出栈，setTimeout函数入栈，执行栈发现setTimeout函数是WebAPIs，于是将setTimeout所分发的任务交由浏览器内核对应的timer模块处理，然后将setTimeout函数出栈。
setTimeout函数出栈，console.log(&amp;lsquo;end&amp;rsquo;)入栈，执行完毕后控制台输出&amp;rsquo;end&amp;rsquo;，然后console.log()函数出栈，若timer模块计时结束就将回调函数放进任务队列。
然后执行栈中还剩下main()，main函数出栈，此时执行栈为空。开始检查任务队列，队列中有任务，就拿到执行栈中去执行。再依次出栈。
这个例子中只使用了setTimeout，是WebAPIs中的一个。其他的WebAPIs例如ajax请求，DOM等都由浏览器内核中不同的模块去处理。结合前面讲的任务源，来自不同任务源的任务会被放进不同的任务队列。即setTimeout分发的任务会进入setTimeout任务队列（因为可能会有多个setTimeout被调用），诸如setTimeout、setInterval等又同属于“宏任务”，而像promise等则属于“微任务”。既然有“宏任务”和“微任务”之分，那么当执行任务队列中的任务时先去哪个呢？下面来讲一下时间循环的具体流程。
事件循环的流程  从script整体代码开始，执行同步任务。
 当碰到异步任务时，会将异步任务交由对应的浏览器内核模块去执行，执行完毕后将其回调函数（即事件处理程序）放到对应的任务队列中，等待被执行。
 第二步并不会阻塞下面同步代码的执行。
 当执行栈为空时，就会优先去检查“微任务”，“微任务”中有“process.nexttick任务队列”、“promise队列”等，前者优先级大于后者，拿出队首任务放到执行栈中执行，执行完出栈，继续拿下一个“微任务”，直到所有的“微任务队列”清空。此时，一轮循环结束！
 下一轮循环从“宏任务”开始，“宏任务”包括“setTimeout任务队列”、“setInterval任务队列”等，拿出队首的宏任务放进执行栈中执行，执行完出栈。注意！当一个“宏任务”又创建了一个“微任务”的话，则会将该“宏任务”所在的“宏任务队列”清空后，再转去处理微任务，且微任务被清空后，才会执行下一个“宏任务队列”，也就是说，“微任务”可插队！。
 事件循环机制会一直检测执行栈、宏任务队列、微任务队列，不断循环执行。
  例题 (function test() { setTimeout(function() {console.log(4)}, 0); new Promise(function executor(resolve) { console.log(1); for( var i=0 ; i&amp;lt;10000 ; i++ ) { i == 9999 &amp;amp;&amp;amp; resolve(); } console.</description>
    </item>
    
    <item>
      <title>狐耳的技术栈</title>
      <link>https://hueralin.github.io/2019/stack/</link>
      <pubDate>Mon, 02 Sep 2019 17:08:32 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/stack/</guid>
      <description> JavaScript JS闭包
 JS执行环境/AO/VO
 事件循环
 async/await
  HTML CSS 性能优化手段 webpack </description>
    </item>
    
    <item>
      <title>JS执行环境，作用域链，变量对象/活动对象</title>
      <link>https://hueralin.github.io/2019/jsec/</link>
      <pubDate>Mon, 02 Sep 2019 11:20:42 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/jsec/</guid>
      <description>JS的重点内容之一，虽然不会在面试题中直接那么问，多半给你出一段代码，看输出什么。
我觉得了解了这部分内容，能让我们对整个JS的执行流程有个详细、准确地认识，在面对工作中的一些错误也能快速且正确的排错。
JS执行环境 JS的执行环境又被称为执行上下文（Execution context），简称EC。顾名思义，JS执行环境就是JS执行时才会存在的环境，常见的执行环境有两种：全局执行环境和函数执行环境。当JS代码执行的时候，我们会进入不同的执行环境，这些执行环境会构成一个执行环境栈。
EC的组成：
1. 变量对象（VO）：包含变量的对象，无法被访问
2. [[scope]]：作用域链，由变量对象构成，该属性是指向作用域链头节点的指针
3. this指针：指向环境对象（也是一个普通对象），而不是执行环境EC
EC的创建：
EC是在调用函数的时候创建的，一个EC的生命周期分为两个阶段：创建阶段 和 执行阶段：
1. 创建阶段：此时EC创建变量对象，建立作用域链，确定this的指向，
2. 代码执行阶段：完成变量赋值，其他函数调用等代码的执行
其中变量对象的创建也是个重点，这里涉及到了预编译的问题：
变量对象的创建：
1. 根据函数的参数，建立arguments对象（类数组，将参数值保存在下标中）。
2. 函数声明提升：扫描所有的函数声明，将函数名作为变量对象的属性名，属性值为函数在内存中的地址，如果属性名存在，则会被覆盖。
3. 变量声明提升：扫描所有的变量声明，将变量名作为变量对象的属性名，属性值初始化为undefined，如果属性名存在，则会跳过，不覆盖（防止同名的函数被覆盖为undefined，毕竟函数是一等公民嘛～）。
注意：在代码执行阶段的时候，变量才会被赋值，之前一直都是undefined。
由上可知，作用域其实就是一个变量对象。那么什么是变量对象？
变量对象（VO） 变量对象存储了EC中定义的变量和函数声明，“这个对象是规范上的，或者说是引擎实现上的，不可在JS环境中访问到”。
活动对象（AO） “活动对象其实就是变量对象的激活状态” 这是我在大多数博文中找到的介绍，即当执行流进入一个函数时，EC会被创建，变量对象会被创建，变量对象被激活成为活动对象。
此处有争议：
1. 根据“函数是被一级一级的调用的”，我是不是可以说这一级一级向下执行的函数的变量对象都是活动对象呢？毕竟这些函数都被执行了。所以说，我觉得 “活动对象” 应该是处于作用域链顶端的变量对象，该变量对象处于最近被执行的EC。
2. 另一种说法，不是存在一个执行环境栈嘛，当A函数里执行了B函数，那么B函数入栈，A函数可以想象成处于一种 “休眠” 状态，B函数才算真正被执行。所以B函数里的执行环境、变量对象被创建，变量对象被激活为活动对象。（Emmm，好像也有道理。哈！都是我的猜想😂）
当函数执行完毕，它的执行环境会被销毁，活动对象也会跟着销毁。但这是在一般的情况下，如果是 闭包，那就得另当别论。假设A函数里返回了B函数，B函数引用着A函数执行环境里的活动对象。当A函数执行完毕后，A函数的环境变量被销毁，但是活动对象依然存在于作用域的顶端。当返回的函数被调用时，会创建自己的执行环境和活动对象（此时应该就有两个活动对象），闭包函数的活动对象里面引用着上一个活动对象，当闭包函数执行完后，两个活动对象都将被销毁。
作用域链 作用域分为两种：全局作用域 和 局部作用域。
前面说过，作用域链其实就是变量对象，但并不是一个，而是一串儿😂。我们所说的局部作用域其实就是当前执行环境的变量对象，我们在查找一个变量的时候，如果在当前变量对象里面查不到的话，就会顺着作用域链一级一级的向上查找，直到全局作用域，因此全局作用域处于作用域链的末端。
最后，推荐一篇知乎上的帖子，上面讨论的很详细。（尤其是那几个图，很直观，我也就不再放图了😂）
(我听见你在说我懒了&amp;hellip;&amp;hellip;)</description>
    </item>
    
    <item>
      <title>JS闭包</title>
      <link>https://hueralin.github.io/2019/closure/</link>
      <pubDate>Fri, 30 Aug 2019 17:41:06 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/closure/</guid>
      <description>参考资料：阮一峰
参考资料：MDN
之前简单学习过闭包，也会无意间使用过闭包，但如果你要问我闭包是什么我也答不上来。今天呢，重新学习闭包，做个总结。
什么是闭包 相信你在学习闭包的时候肯定看过类似的许多文章是这么说的：“闭包就是一个能够访问 其他函数的变量 的函数”，如果你看过《你不知道的javascript》这本书中关于闭包的解释，你会觉得这句话很片面，也很浅陋，而这句话被当今好多博文所提及，给好多学习闭包的小伙伴造成了不少的误解。
《你不知道的javascript》这本书中对于闭包是这么说的：“当一个函数能够访问定义它时所处环境的局部变量时，那么就形成了一个闭包（具体怎么说的我也记不太清楚了）”，重点是“形成了一个闭包”，而不是大多数人所说的闭包就是那个函数，闭包其实还跟环境有关。在MDN中也有类似的解释，开头第一句话就是“闭包是函数和声明该函数的词法环境的组合”。下面还有一段解释:
“闭包是由函数以及创建该函数的词法环境组合而成，这个环境包含了这个闭包创建时所能访问的所有局部变量”。  关于什么是词法作用域请看 [词法作用域]()
啪！MDN 还是说出了打脸的话，在makeAdder栗子中，它竟然说“add5 和 add10 都是闭包”（糟糕，我要下不来台了），为什么又说这两个函数是闭包呢，虽然后面还是扯上了词法作用域，但这让读者看起来挺迷啊（哼，双标狗！😂）。
function parent() { // 外部函数 let name = &#39;huer&#39; // 内部变量 return function children() { // 内部函数 console.log(name) } } let other = parent() other() // ‘huer’  说下我的简单理解，闭包既然被称为包，那我就可以把它想象成一个包结构（包袱），包裹着外部函数的内部变量和内部函数，并返回内部函数。注意：内部函数是要被返回的！ 如果内部函数没有被返回，那么当外部函数执行完毕后，外部函数里面的所有变量和函数都会被垃圾回收机制所清理。此时，我们就引出了闭包函数的一个重要特性，可以使某些变量长时间存在于内存中而不会被销毁。正常情况下，执行完一个函数，即return一个值后，该函数及其内部所有变量就会被回收。而当我们在函数内部又定义了一个函数时，根据对词法作用域的理解，该内部函数可以访问外部函数所定义的变量，即内部函数对它所处的词法作用域有一种引用关系，如果我们将内部函数return出去，并返回给一个变量，那么该变量就是对内部函数的一个引用，从而也能访问外部函数所定义的变量。那么这就实现了某些变量能够一直存在于内存中而不会被销毁，并且还是私有的，其他外部的变量无法访问，只有return的内部函数才能访问。
在好多博文给出的栗子中，内部函数总是使用了外部函数所定义的变量，这就使好多同学误解，返回的内部函数一定要使用外部函数定义的变量，其实这是不对的。打个比方，我们（内部函数）出生在家里（词法作用域），我们对家里的一切事物都可以够得到，摸得着（除掉‘3岁以下儿童勿碰’等乱七八糟的规则），都可以使用，这并不意味着这些东西此时就在我们手里，它们不在我们的手里，我们也对它们有使用权（即，内部函数对所处的词法作用域有引用关系）。这就是闭包。
形成闭包的条件：外部函数（词法作用域） + 返回一个内部函数
我们上面的代码只是访问了内部变量，其实我们返回的内部函数还能操作内部变量，是不是有点面向对象的感觉？
function parent() { let name = &#39;huer&#39; function getName() { return name } function setName(val) { name = val } return { getName, setName } } let obj = parent() obj.</description>
    </item>
    
    <item>
      <title>Mock 前端假数据</title>
      <link>https://hueralin.github.io/2019/mock/</link>
      <pubDate>Wed, 21 Aug 2019 16:09:41 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/mock/</guid>
      <description>为什么需要前端做假数据？Emmmm，不用我说了吧～
 官方文档看这里MockJs！
数据模版之类的语法去看官方文档，我这里只简单介绍一下我的使用情况。</description>
    </item>
    
    <item>
      <title>Array</title>
      <link>https://hueralin.github.io/2019/array/</link>
      <pubDate>Mon, 19 Aug 2019 15:46:37 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/array/</guid>
      <description>Array Emmmm, Array的函数不少，至少我觉的是这样。随着ES的发展，Array多了许多奇奇怪怪的函数。
虽说奇怪&amp;hellip;.但用起来超爽的啊！！！！
什么？想要查找数组中的某个元素？ Array.find() 拿走不送！（ES6）
该函数接受两个参数：callback、thisObj
在回调函数中return符合查找条件的元素，若查找成功则直接返回该元素的值，否则返回undefined，并且不会改变原素组，简直不要太爽！
如果想要查找某个元素的索引的话，可以使用 Array.findIndex() 函数，找不到的话返回-1。
增删元素类（改变原数组）  push() 在后面插入
 unshift() 在前面插入
 pop() 在后面弹出 shift() 在前面弹出  元素查找类  find(callback) 通过callback的逻辑，查找满足条件的元素，返回“值”
 findIndex(callback) 通过callback的逻辑，查找满足条件的元素，返回“索引“ includes(item) 查找是否有item，返回布尔值
 indexOf(item) 查找是否有item，返回下标
  数组遍历类 &amp;mdash; forEach() &amp;mdash;
let a = [1,2,3,4,5] a.forEach((item, index, arr) =&amp;gt; { console.log(item) // 1,2,3,4,5 }) /* forEach 遍历的范围在第一次调用 callback 前就会确定,所以后续调用中 添加 和 删除 的item都不会被遍历到 */ a.forEach((item, index, arr) =&amp;gt; { arr.</description>
    </item>
    
  </channel>
</rss>