<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on 狐耳的雪原</title>
    <link>https://hueralin.github.io/categories/react/</link>
    <description>Recent content in React on 狐耳的雪原</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Aug 2019 14:24:46 +0800</lastBuildDate>
    
	<atom:link href="https://hueralin.github.io/categories/react/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>React_router配置</title>
      <link>https://hueralin.github.io/2019/react_router/</link>
      <pubDate>Mon, 05 Aug 2019 14:24:46 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/react_router/</guid>
      <description>最近在学习React-router遇到了一些问题，在此记录一下：
目前成功的配置为：
app.jsx
import React from &#39;react&#39; import ReactDOM from &#39;react-dom&#39; import { HashRouter as Router, Route } from &#39;react-router-dom&#39; import Content from &#39;./components/Content.jsx&#39; import About from &#39;./components/About.jsx&#39; import Posts from &#39;./components/Posts.jsx&#39; import Post from &#39;./components/Post.jsx&#39; ReactDOM.render( &amp;lt;Router&amp;gt; &amp;lt;Content&amp;gt; &amp;lt;Route path=&#39;/about&#39; component={About}&amp;gt;&amp;lt;/Route&amp;gt; &amp;lt;Route path=&#39;/posts&#39; component={Posts}&amp;gt;&amp;lt;/Route&amp;gt; &amp;lt;Route path=&#39;/posts/:id&#39; component={Post}&amp;gt;&amp;lt;/Route&amp;gt; &amp;lt;/Content&amp;gt; &amp;lt;/Router&amp;gt;, document.getElementById(&#39;app&#39;) )  Content.jsx
import React from &#39;react&#39; import { Link } from &#39;react-router-dom&#39; class Content extends React.Component { render () { return &amp;lt;div&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;&amp;lt;Link to=&#39;/&#39;&amp;gt;主页&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;Link to=&#39;/posts&#39;&amp;gt;博文&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;Link to=&#39;/about&#39;&amp;gt;关于&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; {this.</description>
    </item>
    
    <item>
      <title>HOC---高阶组件</title>
      <link>https://hueralin.github.io/2019/hoc/</link>
      <pubDate>Sat, 27 Jul 2019 12:37:17 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/hoc/</guid>
      <description>推荐文章：助你完全理解React高阶组件（Higher-Order Components）
简单讲，高阶组件就是一个函数，以组件为参数，返回另一个组件。
高阶组件的目的就是为了复用，可能有很多人不理解，“组件不就是用来复用的么，为什么还要出来一个高阶组件呢？”。
举个例子，有这么一个需求：</description>
    </item>
    
    <item>
      <title>用webpack搭建简易的React应用</title>
      <link>https://hueralin.github.io/2019/createreactwithwebpack/</link>
      <pubDate>Sun, 21 Jul 2019 00:19:54 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/createreactwithwebpack/</guid>
      <description>Emmm,步骤清单😂
 npm init -y
 npm i webpack webpack-cli webpack-dev-server --save-dev
 npm i react react-dom --save
 npm i babel-core babel-loader@7 babel-preset-es2015 babel-preset-react --save-dev
需要安装的包差不多就这些了，接下来配置webpack.config.js文件
  module.exports = { entry: &amp;quot;./index.jsx&amp;quot;, output: { path: __dirname + &amp;quot;/public&amp;quot;, filename: &amp;quot;bundle.js&amp;quot; }, module: { rules: [ { test: /\.jsx$/, loader: &amp;quot;babel-loader&amp;quot; } ] }, devServer: { contentBase: &amp;quot;./public&amp;quot; } }   在package.json文件中添加脚本
5.1. &amp;quot;build&amp;quot;: &amp;quot;webpack&amp;quot;打包
5.2. &amp;quot;dev&amp;quot;: &amp;quot;webpack-dev-server --open --inline&amp;quot;启动测试服务器</description>
    </item>
    
  </channel>
</rss>