<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>刷题记录 on 狐耳的雪原</title>
    <link>https://hueralin.github.io/categories/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
    <description>Recent content in 刷题记录 on 狐耳的雪原</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Jan 2020 20:18:21 +0800</lastBuildDate>
    
	<atom:link href="https://hueralin.github.io/categories/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LeetCode.547 朋友圈</title>
      <link>https://hueralin.github.io/2020/friends/</link>
      <pubDate>Sat, 04 Jan 2020 20:18:21 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2020/friends/</guid>
      <description>班上有 N 名学生。其中有些人是朋友，有些则不是。他们的友谊具有是传递性。如果已知 A 是 B 的朋友，B 是 C 的朋友，那么我们可以认为 A 也是 C 的朋友。所谓的朋友圈，是指所有朋友的集合。
给定一个 N * N 的矩阵 M，表示班级中学生之间的朋友关系。如果M[i][j] = 1，表示已知第 i 个和 j 个学生互为朋友关系，否则为不知道。你必须输出所有学生中的已知的朋友圈总数。
示例 1:
输入: [[1,1,0], [1,1,0], [0,0,1]]
输出: 2
说明：已知学生0和学生1互为朋友，他们在一个朋友圈。 第2个学生自己在一个朋友圈。所以返回2。
示例 2:
输入: [[1,1,0], [1,1,1], [0,1,1]]
输出: 1
说明：已知学生0和学生1互为朋友，学生1和学生2互为朋友，所以学生0和学生2也是朋友，所以他们三个在一个朋友圈，返回1。
注意：
N 在[1,200]的范围内。 对于所有学生，有M[i][i] = 1。 如果有M[i][j] = 1，则有M[j][i] = 1。
并查集解法 思路：  遍历下三角，因为是对称矩阵。
 若i，j是朋友，则看看他俩是不是一个圈子，若不是则合并。 初始化Set数组各元素值均为自身，即Set[i]=i; 经过一番合并后，遍历Set，Set[i]=i的个数即为朋友圈数。  执行用时 :32 ms, 在所有 C 提交中击败了92.</description>
    </item>
    
  </channel>
</rss>