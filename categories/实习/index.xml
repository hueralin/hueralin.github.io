<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>实习 on 狐耳的雪原</title>
    <link>https://hueralin.github.io/categories/%E5%AE%9E%E4%B9%A0/</link>
    <description>Recent content in 实习 on 狐耳的雪原</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 07 Aug 2019 10:49:37 +0800</lastBuildDate>
    
	<atom:link href="https://hueralin.github.io/categories/%E5%AE%9E%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>后台管理系统</title>
      <link>https://hueralin.github.io/2019/athene/</link>
      <pubDate>Wed, 07 Aug 2019 10:49:37 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/athene/</guid>
      <description>这是实习期一个后台管理的项目 目前正在熟悉该项目，边熟悉，边做一些记录
先来看一下大体的框架：
顶层容器
在container目录下的index.js文件中，有一个IndexContainer组件，该组件中的render函数是这么写的
render () { let { permission } = this.props return ( &amp;lt;div&amp;gt; &amp;lt;Header params={this.props.params} username={permission.username} /&amp;gt; &amp;lt;div className=&#39;main-content&#39;&amp;gt; &amp;lt;SideNav routes={this.props.routes} permissions={permission.permission} /&amp;gt; &amp;lt;div&amp;gt; {this.props.children} &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; ) }  可以看出该系统采用了非常常见的布局，即‘顶部导航+左侧导航+右侧内容’
路由配置
因为路由比较多，所有路由配置分为两个路由文件：
外层路由文件
// 这里引入了内层路由文件 import routers from &#39;./routers&#39; module.exports = ( &amp;lt;Router history={browserHistory}&amp;gt; &amp;lt;Route path=&#39;/&#39; /&amp;gt; &amp;lt;Route path=&#39;/xxx&#39; component={xxx} /&amp;gt; &amp;lt;Route path=&#39;/xx/xx&#39; component={xx} /&amp;gt; ...... &amp;lt;Route path=&#39;&#39; component={Container} onEnter={handleEnterSystem}&amp;gt; {/* 嵌套路由，内层路由文件里的Route渲染的组件都是Container容器下的子组件，在this.props.children处渲染*/} { routers } &amp;lt;/Route&amp;gt; &amp;lt;Redirect from=&#39;*&#39; to=&#39;/error/404.</description>
    </item>
    
    <item>
      <title>实习项目的Header结构解析</title>
      <link>https://hueralin.github.io/2019/zkheader/</link>
      <pubDate>Sun, 28 Jul 2019 00:07:10 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/zkheader/</guid>
      <description>最近在做公司的项目，更改移动端Header的现有布局。
Header是React组件，点击按钮出现侧边栏导航。
下面简单来介绍一下Header的结构：
Header接受了3个props，分别是“userInfo”、“changeNavState”、“style”。
userInfo是用户信息，changeNavState是用来更改侧边导航状态的函数，style是一个类样式。
以上几个props都交由PropTypes来验证参数的合法性。
该Header组件内仅维护了一个状态，那就是 subNav，即侧边导航栏的显示与否，changeNavState函数改变的就是它。
在render渲染函数中：
const { userInfo, style } = this.props
根据是否有userInfo.avatar属性来初始化headUrl变量（有则赋值为用户头像URL，无则赋值为默认头像URL）
接下来return一个JSX，
首先判断subNav是否为真，真则显示侧边导航。
然后是左右布局，左边是点击显示侧边导航的下拉按钮和点击能返回主页的LOGO，右边是用户头像。
左边的导航按钮添加点击事件（调用changeNavState函数），通过控制subNav状态来显示和隐藏侧边导航。
右边判断userInfo.id属性，有则根据headeUrl显示用户头像，否则显示默认头像。默认头像图标添加点击跳转登录事件。
其中userInfo属性是由connect函数连接的， userInfo来自于Redux的State。</description>
    </item>
    
    <item>
      <title>Zhike</title>
      <link>https://hueralin.github.io/2019/zhike/</link>
      <pubDate>Fri, 26 Jul 2019 15:48:33 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/zhike/</guid>
      <description>线上分支：production
测试分支：master（www.dev.xxxxxx）
迭代分支：release-3.xxx
在一个迭代开始后，各种开发新特性，修复BUG，当这些工作做完时，需要将所有的改动都合并到release分支上，
作为一次迭代，再合并到master分支（dev）进行测试，测试没问题后再合并到production分支上，发布（上线）。</description>
    </item>
    
  </channel>
</rss>