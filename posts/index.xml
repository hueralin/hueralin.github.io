<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 狐耳的雪原</title>
    <link>https://hueralin.github.io/posts/</link>
    <description>Recent content in Posts on 狐耳的雪原</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Jul 2019 18:54:31 +0800</lastBuildDate>
    
	<atom:link href="https://hueralin.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Webpack4 配置文件解析</title>
      <link>https://hueralin.github.io/2019/webpack4/</link>
      <pubDate>Mon, 29 Jul 2019 18:54:31 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/webpack4/</guid>
      <description>let path = require(&#39;path&#39;) // 创建HTML模板的插件 let HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;) // 抽离CSS样式为单独文件的插件（原来都是将CSS样式全部放进了style里面） let MiniCssExtractPlugin = require(&#39;mini-css-extract-plugin&#39;) // 优化CSS的插件（压缩CSS文件） let OptimizeCss = require(&#39;optimize-css-assets-webpack-plugin&#39;) // 用了上面优化CSS的插件，就得使用下面这个插件来优化JS（压缩JS文件） let UglifyJsWebpackPlugin = require(&#39;uglifyjs-webpack-plugin&#39;) module.exports = { // 优化CSS和JS // 优化项 optimization: { // 压缩 minimizer: [ new UglifyJsWebpackPlugin({ cache: true, // 缓存 parallel: true, // 并发压缩 sourceMap: true // }), new OptimizeCss() ] }, // 模式：开发和生产模式两种 mode: &#39;development&#39;, entry: &#39;./src/index.js&#39;, output: { // path 必须是绝对路径 // path.</description>
    </item>
    
    <item>
      <title>汉服那么美，为何现在流行不起来</title>
      <link>https://hueralin.github.io/2019/hjjh-02/</link>
      <pubDate>Sun, 28 Jul 2019 12:27:50 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/hjjh-02/</guid>
      <description>出行不便（生活节奏）
 价格昂贵（手工刺绣，配饰）
 身材和气质（汉服对这两点要求有点高）
 普及范围狭窄（汉服知识？恐怕得考古好久）
  服装和文化一样，要与时俱进。要想发扬汉服文化，让汉服流行起来，不能一味的追求历史（此言不当，不知如何表述），应该结合当下的形式，做出一些改进，这算不上“取其精华，去其糟粕”，古代的穿衣礼节，穿衣过程确有其繁琐的地方，放到现代来确实让人难以接受，这也是汉服流行不起来的原因之一。我们不能一味的遵从汉服文化而渐渐变得复古，这也是不可能的。最近在相关贴吧上看到过这样一个帖子，有个小姐姐晒出汉服写真却被一群大叔嘲讽，不懂汉服历史，穿着不伦不类，不认同这是汉服，戏称为“花衣服”。大叔们有这种想法也无可厚非，毕竟现在的穿汉服的人多多少少也搭配着一些现代的服饰，比如手表、小白鞋，还有大叔们嘲讽的丝袜，小姐姐面对嘲讽也是欲哭无泪&amp;hellip;
小姐姐错了么？大叔们错了么？
在我看来，此事无关对错。现在的年轻人穿汉服无非两个原因，其一是服饰着实好看，其二是想为发扬中国传统文化献上一份力量。曾经抖音上的一个短视频对我产生了一丝丝触动，一个女孩儿边哭变向床上扔着一件件汉服，边扔边说“我穿汉服上街怎么了？我喜欢汉服，这有错么，碍着你们了？一个个用异样的眼光看我，甚至还嘲讽我穿着奇装异服”，“在日本韩国，这在他们看来是很正常不过的事情，为什么在国内穿传统服装却被看作异类”（Emmm，原话忘了，大体这个意思吧）这段话引起了我的思考
至于思考了啥？晚上回去再说，学习！😂
to be continue&amp;hellip;</description>
    </item>
    
    <item>
      <title>汉家江湖-起源</title>
      <link>https://hueralin.github.io/2019/hjjh-01/</link>
      <pubDate>Sun, 28 Jul 2019 12:22:08 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/hjjh-01/</guid>
      <description>不知何时起，对汉服有了兴趣～
能做什么？ 1. 维护一个像B站二次元的网站（搞活动） 2. 汉服实体店 3. 联动武侠IP，电影？动漫？ 4. 侠客栈（民宿） 5. IP手办？</description>
    </item>
    
    <item>
      <title>实习项目的Header结构解析</title>
      <link>https://hueralin.github.io/2019/zkheader/</link>
      <pubDate>Sun, 28 Jul 2019 00:07:10 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/zkheader/</guid>
      <description>最近在做公司的项目，更改移动端Header的现有布局。
Header是React组件，点击按钮出现侧边栏导航。
下面简单来介绍一下Header的结构：
Header接受了3个props，分别是“userInfo”、“changeNavState”、“style”。
userInfo是用户信息，changeNavState是用来更改侧边导航状态的函数，style是一个类样式。
以上几个props都交由PropTypes来验证参数的合法性。
该Header组件内仅维护了一个状态，那就是 subNav，即侧边导航栏的显示与否，changeNavState函数改变的就是它。
在render渲染函数中：
const { userInfo, style } = this.props
根据是否有userInfo.avatar属性来初始化headUrl变量（有则赋值为用户头像URL，无则赋值为默认头像URL）
接下来return一个JSX，
首先判断subNav是否为真，真则显示侧边导航。
然后是左右布局，左边是点击显示侧边导航的下拉按钮和点击能返回主页的LOGO，右边是用户头像。
左边的导航按钮添加点击事件（调用changeNavState函数），通过控制subNav状态来显示和隐藏侧边导航。
右边判断userInfo.id属性，有则根据headeUrl显示用户头像，否则显示默认头像。默认头像图标添加点击跳转登录事件。
其中userInfo属性是由connect函数连接的， userInfo来自于Redux的State。</description>
    </item>
    
    <item>
      <title>Mac使用技巧</title>
      <link>https://hueralin.github.io/2019/mactips/</link>
      <pubDate>Sat, 27 Jul 2019 17:21:45 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/mactips/</guid>
      <description>VSCODE使用命令行打开目录
&amp;gt;相关知识：环境变量的设置
环境变量的分类：系统级和用户级
系统级：对所有用户生效的永久性变量（/etc/profile）
用户级：对单一用户生效的永久性变量（～/.bash_profile）
 查看单个环境变量echo $PATH
 查看所有环境变量env
 修改环境变量PATH=&amp;quot;xxxx&amp;quot; 查看所有本地定义的shell变量set
 删除变量unset VNAME
 设置只读变量readonly VNAME  使用export指令添加环境变量：
vim ~/.bash_profile
输入 export JAVA_HOME=/usr/java/jdk
输入 export PATH=$JAVA_HOME/bin:$PATH
添加完成后新的环境变量不会立即生效，调用source ~/.bash_profile 该文件才会生效
使用export命令添加临时环境变量：
命令行下输入 export MALIN=&#39;malin&#39;
使用code命令用VSCODE打开目录：
1. 在VSCODE中 command+shift+P -&amp;gt; 输入shell command -&amp;gt; 点击提示Shell Command: Install ‘code’ command in PATH运行
2. 在终端中使用 code 目录路径 打开目录（vscode）</description>
    </item>
    
    <item>
      <title>HOC---高阶组件</title>
      <link>https://hueralin.github.io/2019/hoc/</link>
      <pubDate>Sat, 27 Jul 2019 12:37:17 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/hoc/</guid>
      <description>推荐文章：助你完全理解React高阶组件（Higher-Order Components）
简单讲，高阶组件就是一个函数，以组件为参数，返回另一个组件。
高阶组件的目的就是为了复用，可能有很多人不理解，“组件不就是用来复用的么，为什么还要出来一个高阶组件呢？”。
举个例子，有这么一个需求：</description>
    </item>
    
    <item>
      <title>Git Reset</title>
      <link>https://hueralin.github.io/2019/gitreset/</link>
      <pubDate>Fri, 26 Jul 2019 17:41:51 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/gitreset/</guid>
      <description>惊了！本来想撤销上一次commit，但保留工作区的修改，但是手残加了 &amp;ndash;hard 参数，修改全没了！！！
后来，运行了一遍git reflog branchName, 查看了下该分支上的历史记录，找到reset操作之前的历史，执行git reset --hard reset之前的记录点回来了！！！
回来了！！！！ Git取消对某个文件的跟踪
1. git rm --cached readme.md 删除readme.md的跟踪，并保留在本地。 2. git rm --f readme.md 删除readme.md的跟踪，并且删除本地文件。</description>
    </item>
    
    <item>
      <title>Git分支</title>
      <link>https://hueralin.github.io/2019/gitbranch/</link>
      <pubDate>Fri, 26 Jul 2019 16:45:41 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/gitbranch/</guid>
      <description>分支就是一个指向单个commit的指针
分支基本操作：
1. 分支改名：git branch -m oldName newName
2. 删除分支：git branch -d feature
3. 从master签出feature：git checkout -b feature master
4. 查看本地分支：git branch
5. 查看远程分支：git branch -r
6. 查看所有分支：git branch -a
7. 合并分支：git merge B 要想将B分支合并到A分支，首先要切换回A分支，在执行merge命令</description>
    </item>
    
    <item>
      <title>Zhike</title>
      <link>https://hueralin.github.io/2019/zhike/</link>
      <pubDate>Fri, 26 Jul 2019 15:48:33 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/zhike/</guid>
      <description>线上分支：production
测试分支：master（www.dev.xxxxxx）
迭代分支：release-3.xxx
在一个迭代开始后，各种开发新特性，修复BUG，当这些工作做完时，需要将所有的改动都合并到release分支上，
作为一次迭代，再合并到master分支（dev）进行测试，测试没问题后再合并到production分支上，发布（上线）。</description>
    </item>
    
    <item>
      <title>Git pull 的使用</title>
      <link>https://hueralin.github.io/2019/gitpull/</link>
      <pubDate>Tue, 23 Jul 2019 14:37:19 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/gitpull/</guid>
      <description>语法：git pull &amp;lt;选项&amp;gt; &amp;lt;远程主机名&amp;gt; &amp;lt;远程分支名&amp;gt;:&amp;lt;本地分支名&amp;gt;
 注意：和git push的语法顺序稍有不同
git push 的语法为：git pull &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支名&amp;gt;:&amp;lt;远程分支名&amp;gt;
git pull 意为从远程分支的最新版本拉取下来并于本地分支合并
 git pull origin master:dev 将origin的master分支拉取并合并到本地的dev分支
 git pull origin master 省略了本地分支名，即拉取并合并到本地分支
 git pull origin 若有 某远程分支与当前分支有追踪关系，则远程分支名也可以省略
 git pull 若只有一个远程主机，且只有一个远程分支与当前分支有追踪关系，则可以直接git pull
  git pull相当于git fetch和git merge的简写
比如：git pull origin dev 相当于 git fetch origin dev + git merge origin/dev
未完待续&amp;hellip;</description>
    </item>
    
    <item>
      <title>Fork工作流</title>
      <link>https://hueralin.github.io/2019/fork/</link>
      <pubDate>Tue, 23 Jul 2019 10:34:46 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/fork/</guid>
      <description>Fork工作流 实现协同开发
作为实习新人，在参与公司项目的开发时被要求使用Fork工作流，Fork工作流实际上就是从GitHub上fork一个原仓库，并与原仓库代码保持同步的一种工作方式。
Fork工作流不再是只有一个中央代码库，而是给予每个人一个远程仓库（origin），外加一个唯一的中央仓库（upstream，或称为官方仓库）。点击Fork时就会生成一个自己的远程仓库，每次开发者提交时都会先将自己的贡献提交到origin，然后发起一个Pull Request请求给中央仓库，中央仓库的管理者会决定是否将你的代码提交到中央仓库，其他人都没这个权限。这使得管理者可以接受任何人的提交，而不需要给它们中央仓库的权限。
具体流程
1. 从原仓库fork到自己的origin
2. git clone xxxxxx 将origin克隆到本地
3. git remote add upstream xxxxx 指向上游仓库，即原仓库
4. git checkout -b feature-xx origin/dev 从远程分支检出本地分支进行开发
5. 开发、修改。。。。提交。。。
6. git push origin feature-xx 将本地feature分支push到origin
7. 发起Pull Request请求管理员合并
8. 上述合并可能会导致冲突，因为本地仓库可能比较旧了，需要更新
9. git checkout dev 切回dev分支
10. git pull upstream dev 从原仓库拉取dev分支的最新版本,更新本地的dev分支
11. git checkout -b feature-merge-dev dev 从更新后的本地dev检出合并分支，并切换为该分支
12. git merge feature-xx 合并你的修改，即feature-xx分支上的内容
13. git branch -m feature-merge-dev feature-xx 将合并分支改名为feature-xx 覆盖原分支</description>
    </item>
    
    <item>
      <title>Git push 的使用</title>
      <link>https://hueralin.github.io/2019/gitpush/</link>
      <pubDate>Mon, 22 Jul 2019 14:32:37 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/gitpush/</guid>
      <description>语法：git push &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支名&amp;gt; ：&amp;lt;远程分支名&amp;gt;
  git push origin master
最常用的一个写法，忽略了远程分支名，将本地master分支推送到origin中与之有追踪关系的对应分支（通常同名），若没有则创建一个对应的远程分支。
 git push origin :master
忽略了本地分支名，意味着要推送一个本地的空分支到指定远程分支，即删除指定的远程分支，相当于git push origin --delete master
 git push origin
如果当前分支和远程分支存在对应关系，则两个分支名都可省略掉，直接推送当前分支到对应的远程分支。
 git push
如果只有一个远程主机，且只有一个与当前分支对应的远程分支，那么就可以全都省略，直接git push。
 git push -u origin master
如果对应多个远程主机，-u 则指定一个默认主机，以后就可以直接使用git push推送当前分支到远程对应分支。
 git push &amp;ndash;all origin
不管是否存在对应的远程分支，将本地的所有分支全部推上去。
 git push &amp;ndash;force origin
一般情况下本地仓库比远程仓库旧的话会要求你先git pull进行更新，而 &amp;ndash;force 表明不要更新，直接推上去。
 git push origin &amp;ndash;tags
不推送分支，只推送标签。
&amp;mdash;
关于追踪关系
追踪即本地分支跟进远程分支的变化，用于push、pull、merge等&amp;hellip;
追踪远程分支
 git clone 一般克隆下来的项目将自动创建master分支，并且自动关联到远程的master分支上</description>
    </item>
    
    <item>
      <title>用webpack搭建简易的React应用</title>
      <link>https://hueralin.github.io/2019/createreactwithwebpack/</link>
      <pubDate>Sun, 21 Jul 2019 00:19:54 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/createreactwithwebpack/</guid>
      <description>Emmm,步骤清单😂
 npm init -y
 npm i webpack webpack-cli webpack-dev-server --save-dev
 npm i react react-dom --save
 npm i babel-core babel-loader@7 babel-preset-es2015 babel-preset-react --save-dev
需要安装的包差不多就这些了，接下来配置webpack.config.js文件
  module.exports = { entry: &amp;quot;./index.jsx&amp;quot;, output: { path: __dirname + &amp;quot;/public&amp;quot;, filename: &amp;quot;bundle.js&amp;quot; }, module: { rules: [ { test: /\.jsx$/, loader: &amp;quot;babel-loader&amp;quot; } ] }, devServer: { contentBase: &amp;quot;./public&amp;quot; } }   在package.json文件中添加脚本
5.1. &amp;quot;build&amp;quot;: &amp;quot;webpack&amp;quot;打包
5.2. &amp;quot;dev&amp;quot;: &amp;quot;webpack-dev-server --open --inline&amp;quot;启动测试服务器</description>
    </item>
    
    <item>
      <title>搭个窝，储点儿粮，准备过冬！</title>
      <link>https://hueralin.github.io/2019/life20190720/</link>
      <pubDate>Sat, 20 Jul 2019 23:28:34 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/life20190720/</guid>
      <description>今天总算把我的小窝搭建起来了，hugo + github pages 还真不错，感谢该hugo主题的作者，UI很好看。 为什么要放在GiHub上而不是自己前后端+服务器啥的一通瞎搞呢？记得有人说过，刚开始做博客的时候大包大揽，前后端都自己做，确实考验技术也很有成就感，或许也是一时兴起，刚接触博客，饶有趣味，可后来操心太多，可能还会修复bug，还不时续费维护，那时才想起来，”我就是要发篇博客嘛，那么麻烦干什么，都不能专心写作了“，于是github静态博客成了首选（毕竟CSDN、博客园、简书啥的不能定制），通过简单的Markdown语法+GitHub基础就可以发布一篇博客了，岂不美哉～ 可以在该博客上发发技术文章，也可以记录学习和生活，简简单单，专心写作。今天也算是里程碑的一天吧，有此博客就像在北京有了一套房（哈哈哈😂，有些夸张～），实习的日子，加油！</description>
    </item>
    
  </channel>
</rss>