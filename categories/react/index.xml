<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on 狐耳的雪原</title>
    <link>https://hueralin.github.io/categories/react/</link>
    <description>Recent content in React on 狐耳的雪原</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Sep 2019 13:40:10 +0800</lastBuildDate>
    
	<atom:link href="https://hueralin.github.io/categories/react/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>技术分享之Redux思想</title>
      <link>https://hueralin.github.io/2019/share/</link>
      <pubDate>Wed, 18 Sep 2019 13:40:10 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/share/</guid>
      <description>Redux 普通的状态管理 // 状态 let state = { // 计数 count: 0 }··· // 修改状态 state.count = 1 // 获取状态 console.log(state.count)  缺点：状态改变，依赖状态的地方得不到通知
带有发布订阅的状态管理 // 状态 let state = { // 计数 count: 0 } // 集中管理订阅 let listeners = [] // 订阅函数 function subscribe(callback) { listeners.push(callback) } // 修改状态的函数 function changState(newVal) { state.count = newVal for(let i=0;i&amp;lt;listeners.length;i++){ listeners[i]() } } // main subscribe(() =&amp;gt; { console.log(&#39;count&#39;, state.count) }) changState(1) // 1 changState(2) // 2 changState(3) // 3  缺点：只对count（即单个状态）有效，应将公共操作封装起来。</description>
    </item>
    
    <item>
      <title>React组件中的函数this绑定</title>
      <link>https://hueralin.github.io/2019/bind/</link>
      <pubDate>Tue, 20 Aug 2019 11:04:35 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/bind/</guid>
      <description>实习项目遇到的问题 关于函数this绑定！ 最近在React项目中遇到了关于函数this绑定的问题，因为在普通函数（诸如:function(){xxx}）中，this的绑定是动态的，在被执行时才会确定。若这些普通函数在自身组件内使用一般不会有太大的问题，然而一旦被当作参数（例如事件处理函数）传递到其他组件时，this就会绑定为其他组件的实例，在获取原实例的状态时就会发生错误。
箭头函数的this绑定和普通函数不一样，它是静态绑定的，也就是说箭头函数的this绑定是在定义时绑定的，即定义箭头函数时所处的作用域的this。所以说如果React组件中的函数是用箭头函数的形式定义的话，就不用担心this绑定的问题。
假如你的onClick事件处理函数在被触发时需要传参，如果直接 onClick={this.handleClick(xxx)} 话，onClick得到的就不是函数，而是函数返回的结果，所以应使用 onClick={() =&amp;gt; this.handleClick(xxx)} ，即给onClick一个箭头函数作为事件处理函数，那么this就绑定为了当前组件的实例，调用的普通函数也不用做特殊的处理。
我犯了一个最基础也最致命的问题，在渲染中进行了状态的改变！按理说我不应该会犯这种错误，我犯这种错误的原因就是我将箭头函数和普通函数结合使用（模仿的项目中的老代码）：
handleInput(key) { return (e) =&amp;gt; { let inputValue = {} inputValue[key] = e.target.value this.setState({ data: Object.assign({}, this.state.data, inputValue) }) } } onChange={this.handleInput(xxx)}  看出和之前 onClick={() =&amp;gt; this.handleClick(xxx)} 的不同了么？
这里是由普通函数将箭头函数return了出来，所以函数渲染时立即执行handleInput，并将执行后的箭头函数传给onChange，顺便完成this绑定，Emmmm，秀啊！可惜当初我没搞懂这个用意，将handleInput彻底改成了普通函数，导致在渲染时执行了this.setState()，浏览器不停的改变状态和渲染，瞬间报错0～20000+，不得不强制杀死浏览器进程&amp;hellip;&amp;hellip;
总结React组件中的函数this绑定的几种方法 一、每当作为事件处理函数时，例如：onClick onChange 等，都手动绑定一次
// 这种方法的好处是在绑定this的同时能传递参数 onClick={this.handleClick.bind(this, args)} // 缺点是，每次都得手动调用bind()  二、在构造函数中绑定一次，一劳永逸
// 缺点是不能传递参数 this.handleCLick = this.handleClick.bind(this)  三、React组件的函数直接定义成箭头函数
handleClick = (args) =&amp;gt; {xxxxx} // 缺点也是不能传递参数   上述三个做法有个矛盾，就是“一次绑定”和“传递参数”不能兼顾</description>
    </item>
    
    <item>
      <title>React_router配置</title>
      <link>https://hueralin.github.io/2019/react_router/</link>
      <pubDate>Mon, 05 Aug 2019 14:24:46 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/react_router/</guid>
      <description>最近在学习React-router遇到了一些问题，在此记录一下：
目前成功的配置为：
app.jsx
import React from &#39;react&#39; import ReactDOM from &#39;react-dom&#39; import { HashRouter as Router, Route } from &#39;react-router-dom&#39; import Content from &#39;./components/Content.jsx&#39; import About from &#39;./components/About.jsx&#39; import Posts from &#39;./components/Posts.jsx&#39; import Post from &#39;./components/Post.jsx&#39; ReactDOM.render( &amp;lt;Router&amp;gt; &amp;lt;Content&amp;gt; &amp;lt;Route path=&#39;/about&#39; component={About}&amp;gt;&amp;lt;/Route&amp;gt; &amp;lt;Route path=&#39;/posts&#39; component={Posts}&amp;gt;&amp;lt;/Route&amp;gt; &amp;lt;Route path=&#39;/posts/:id&#39; component={Post}&amp;gt;&amp;lt;/Route&amp;gt; &amp;lt;/Content&amp;gt; &amp;lt;/Router&amp;gt;, document.getElementById(&#39;app&#39;) )  Content.jsx
import React from &#39;react&#39; import { Link } from &#39;react-router-dom&#39; class Content extends React.Component { render () { return &amp;lt;div&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;&amp;lt;Link to=&#39;/&#39;&amp;gt;主页&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;Link to=&#39;/posts&#39;&amp;gt;博文&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;Link to=&#39;/about&#39;&amp;gt;关于&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; {this.</description>
    </item>
    
    <item>
      <title>HOC---高阶组件</title>
      <link>https://hueralin.github.io/2019/hoc/</link>
      <pubDate>Sat, 27 Jul 2019 12:37:17 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/hoc/</guid>
      <description>推荐文章：助你完全理解React高阶组件（Higher-Order Components）
简单讲，高阶组件就是一个函数，以组件为参数，返回另一个组件。
高阶组件的目的就是为了复用，可能有很多人不理解，“组件不就是用来复用的么，为什么还要出来一个高阶组件呢？”。
举个例子，有这么一个需求：</description>
    </item>
    
    <item>
      <title>用webpack搭建简易的React应用</title>
      <link>https://hueralin.github.io/2019/createreactwithwebpack/</link>
      <pubDate>Sun, 21 Jul 2019 00:19:54 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/createreactwithwebpack/</guid>
      <description>Emmm,步骤清单😂
 npm init -y
 npm i webpack webpack-cli webpack-dev-server --save-dev
 npm i react react-dom --save
 npm i babel-core babel-loader@7 babel-preset-es2015 babel-preset-react --save-dev
需要安装的包差不多就这些了，接下来配置webpack.config.js文件
  module.exports = { entry: &amp;quot;./index.jsx&amp;quot;, output: { path: __dirname + &amp;quot;/public&amp;quot;, filename: &amp;quot;bundle.js&amp;quot; }, module: { rules: [ { test: /\.jsx$/, loader: &amp;quot;babel-loader&amp;quot; } ] }, devServer: { contentBase: &amp;quot;./public&amp;quot; } }   在package.json文件中添加脚本
5.1. &amp;quot;build&amp;quot;: &amp;quot;webpack&amp;quot;打包
5.2. &amp;quot;dev&amp;quot;: &amp;quot;webpack-dev-server --open --inline&amp;quot;启动测试服务器</description>
    </item>
    
  </channel>
</rss>