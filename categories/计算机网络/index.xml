<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机网络 on 狐耳的雪原</title>
    <link>https://hueralin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
    <description>Recent content in 计算机网络 on 狐耳的雪原</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Oct 2019 14:11:39 +0800</lastBuildDate>
    
	<atom:link href="https://hueralin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HTTPS</title>
      <link>https://hueralin.github.io/2019/https/</link>
      <pubDate>Sat, 12 Oct 2019 14:11:39 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/https/</guid>
      <description>HTTP协议的弊端 报文明文通信 由于HTTP协议本身没有加密手段，所以无法对通信的内容进行加密。因此，一般情况下的HTTP通信都是明文通信的，索引很容易被截获窃听。为了保证通信的安全，必须采取某种外部加密措施。
加密的方式一般有两种，对通信的加密和对内容的加密。
对通信的加密就是 HTTP + SSL/TLS 这种，在真正通信之前先建立一个加密的通信线路。
对内容的加密就是先对要发送的内容进行加密，把加密后的内容放进报文里发送，前提是要求客户端和服务器同 时具备加密和解密机制。
不进行身份验证 HTTP是不进行身份验证的。在TCP三次握手过程中也仅仅是验证双方的收发能力是否完好，并不对通信的双方进行身份验证。也就是说服务器对发来的请求照单全收并且会给对方一个响应。
 无法确定请求发送的目的服务器是真正的服务器。
 无法确定收到响应的客户端是真正的客户端。
 无法确定客户端用户是否有访问权限，因为服务器上的有些信息需要有权限的用户才能访问。
 服务器照单全收，包括垃圾请求（DoS）。  无法验证报文的完整性 因为HTTP报文是明文发送的，所以中途有可能被篡改，但是HTTP协议没有数据验证功能，对方接受到的数据可能是被篡改过的。例如中间人攻击，当我们在网站上下载一个文件时，文件在传输过程中被篡改，客户端无法确认下载的是否为正确的文件，可能是带有病毒的文件。
为了有效地防止上面的弊端，我们有必要使用HTTPS。既然单独使用HTTP协议无法确保安全，我们就必修将HTTP协议和其他协议结合起来，共同完成目标。
HTTPS HTTPS = HTTP + 加密 + 身份认证 + 数据完整性验证
HTTPS 即 HTTP Secure，是身披SSL外壳的HTTP。传统的通信方式是HTTP直接和TCP通信，而HTTPS在中间加了一层SSL，演变成先和 SSL通 信，再由 SSL和 TCP 通信。有了SSL加持，HTTP 就拥有了 HTTPS 的加密、证书和完整性保护 这些功能。
公钥加密技术 现在常用的加密技术里有两种：对称加密　和　非对称加密。
对称加密就是双方都持有约定好的加密解密算法，但是一旦双方约定好的加密解密算法被第三方知道了，加密也就没有了意义。所以如何将约定好的加密解密算法传给对方是个问题，而且还得保存好自己手中的密钥。
非对称加密采用了双密钥的方法，一对公私钥。公钥加密私钥解密，或者私钥加密公钥解密。公钥可以公开，四月自己保存好。这样，传递只传公钥，不怕被别人知道，毕竟只能私钥解开。所以公钥加密，私钥解密比较安全。
混合加密 HTTPS采取的是对称加密和非对称加密相结合的方法，因为非对称加密的开销比较大。HTTPS使用非对称加密传递对称加密所需要的密钥，保证密钥的安全，然后再使用对称加密方法进行通信。
证明公钥正确性（可信度）的证书 即使使用了“混合加密”也是有问题的，因为我们没法确认公钥的安全性，万一拿到的公钥是假的呢？如果连SSL这一层都无法安全通过，那接下来的通信一定是不可靠的。
为了解决上面的问题，我们使用了一种叫做证书的东西，由数字证书颁发机构（CA）发布的一种电子凭证。
申请流程：
1. 申请人向CA提出公钥证书的申请
2. CA对使用自己的私钥对申请人的一些基本信息以及申请人的公钥进行签名（相当于加盖发证书机 构的公章）
3. 将公钥放到公钥证书中，发给申请人
客户端收到服务器发来的公钥证书后的验证流程：
客户端使用CA的公钥（一般内置在浏览器中），对证书上的数字签名进行验证，验证通过说明是权威机构（说明机构可信）颁发的证书，该服务器的公钥可信，身份可信。</description>
    </item>
    
    <item>
      <title>用Node.js讲解Cookie</title>
      <link>https://hueralin.github.io/2019/cookie/</link>
      <pubDate>Sat, 12 Oct 2019 09:50:42 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/cookie/</guid>
      <description>Cookie 靠死记硬背是学不了东西的&amp;hellip;
搭建简易的服务器环境 let express = require(&#39;express&#39;) let app = express() app.get(&#39;/&#39;, (req, res) =&amp;gt; { // 在响应中添加cookie res.cookie(&#39;background&#39;, &#39;skyblue&#39;) res.cookie(&#39;color&#39;, &#39;green&#39;) res.send(&#39;&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;&#39;) }) app.listen(3000)  发起请求并分析字段 我们请求下试试看：
一开始，我们假设当前域名下是没有cookie的，第一次请求的时候也不会带上cookie。第一次响应时，服务器设置了两个cookie，如上图的set-cookie字段。当我们再次请求时，浏览器会自动带上cookie，如下图：
注意：我们设置cookie前，响应报文没有set-cookie字段，请求报文也不会有cookie字段。
因为我们设置了两个cookie，见上图，cookie字段里不同的cookie之间是通过；和 空格 分割的。
以上就是cookie的大体工作流程。下面我们来介绍下cookie。
Cookie 我们知道HTTP协议是无状态的协议，即TCP连接断开后，当浏览器再次请求访问时，服务器根本不认识这个客户端。但是我们在某些情况下却又希望服务器能记住客户端的状态，这时cookie出现了。
 Cookie 的工作机制是用户识别及状态管理。Web 网站为了管理用户的状态会通过 Web 浏览器，把一些数据临时写入用户的计算机内。接着当用户访问该Web网站时，可通过通信方式取回之前发放的 Cookie。-————《图解HTTP》
 Cookie的属性 Cookie的属性有六种：
1. NAME=VALUE 2. expires=日期 3. path=路径 4. domain=域名 5. secure 6. httpOnly
expires 指定浏览器可发送 Cookie 的有效期，若省略的话，则有效期为该会话结束，即关闭浏览器。
在HTTP/1.1中有个max-age属性，该属性值设置的是相对时间，以秒为单位，优先级比expires高。
path 限制指定 Cookie 的发送范围的文件目录
domain 指定cookie发送的域名，即发送请求时如果当前URL的域名是该domain或者是该域名的子域，就可以携带该cookie。子域可以访问父域的cookie，即从子域发起请求时，cookie字段会带上父域的cookie字段，反之不行。</description>
    </item>
    
    <item>
      <title>HTTP缓存策略</title>
      <link>https://hueralin.github.io/2019/httpcache/</link>
      <pubDate>Wed, 09 Oct 2019 20:00:01 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/httpcache/</guid>
      <description>我再也不废话了&amp;hellip;&amp;hellip;切入正题!
HTTP缓存策略有两种:强缓存和协商缓存.
先大体说一下浏览器缓存的过程:
 浏览器向服务器发起请求前首先向浏览器缓存查询是否有该请求的结果及缓存标识.
 有,则从缓存中读取(强缓存成功),否则再去询问服务器(协商缓存 or 直接请求).  强缓存策略 强缓存的三种情况:
 请求前先去询问浏览器缓存,若有缓存且未失效,则直接从浏览器缓存读取结果,此被称之为&amp;rdquo;强缓存成功&amp;rdquo;.
 &amp;ldquo;强缓存失败&amp;rdquo;, 若有缓存,但已失效,则执行&amp;ldquo;协商缓存&amp;rdquo;策略.
 &amp;ldquo;强缓存失败&amp;rdquo;, 若无缓存, 则向服务器正式发起请求.  强缓存策略涉及到的HTTP头部: Cache-Control / expires
expires 是 HTTP/1.0 的产物,它的值是一个绝对值,即缓存失效的时间点.浏览器会拿客户端的时间和缓存中的此标识做对比,来判断缓存是否过期.所以它的缺陷比较明显,因为客户端和服务器的时间并不总是同步的,也就是说可能出现误差.(可能影响并不多大,别喷我&amp;hellip;&amp;hellip;)
Cache-Control 是 HTTP/1.1 的产物,它的值就丰富多了:
 public 所有内容都将被缓存(客户端和代理服务器都可以)
 private 默认值,只有客户端才能缓存，表明响应只能被单个用户（可能是操作系统用户、浏览器用户）缓存，是非共享的
 no-cache 只有客户端缓存，强制所有缓存了该响应的用户，在使用已缓存的数据前，发送带验证器的请求到服务器，即必须经过协商缓存
 no-store 所有内容都不缓存
 max-age=xxx 缓存将于xxx秒后失效  我们一般使用第五种方式
可以看到cache-control使用的是相对时间,弥补了expires的时间误差缺陷. 在实际应用过程中这两种方式都会有,但是cache-control的优先级要高一些.
协商缓存策略 协商缓存发生在有缓存但到期的情况下. 实际上, 服务器设置的过期时间是用来表明此时的缓存可能会过期, 但我不能保证, 届时你得向我确认一下, 所以, 缓存并不一定失效了. 和商品的保质期一个道理.
此时, 我们需要向服务器发起请求, 询问这个缓存能不能用, 如果服务器表示能用, 返回304, 那我们就去缓存中读取, 否则我们再向服务器请求新的数据.</description>
    </item>
    
    <item>
      <title>TCP流量控制、拥塞控制</title>
      <link>https://hueralin.github.io/2019/tcpys/</link>
      <pubDate>Mon, 09 Sep 2019 12:51:57 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/tcpys/</guid>
      <description>计算机网络推荐书籍：计算机网络（谢希仁）
TCP流量控制、拥塞控制
在前端面试中关于计算机网络的知识多半是HTTP协议、TCP/IP协议，拥塞控制之类的。昨天看了几篇关于拥塞控制的文章，现来做一些总结。
TCP流量控制 一、 流量控制的原因
双方在通信时会涉及到通信速率的问题，即发送速率和处理速率，这两个速率往往是不一样的。如果发送方的发送速率太快，接收方来不及处理，就会将报文放进缓存，若发送方仍不控制发送速率，那么缓存终会爆满，导致丢包，浪费网络资源，所以应该对发送方的发送速率进行控制，使发送方和接收方达到一种动态平衡。
流量控制，即控制发送方的发送速率。
二、滑动窗口
滑动窗口协议：TCP协议中的一种应用，用于网络数据传输中的流量控制。
该协议允许发送方在停止并等待确认报文前发送多个数据，不必每发完一段数据就定下来等待确认，提高网络的吞吐量，所以TCP定义了一个滑动窗口协议，滑动窗口包括发送窗口和接受窗口。
相关概念
1. 窗口：一段可以被发送者连续发送的字节序列范围。
2. 滑动：“窗口”的大小会随着发送过程变化，这种变化是在字节序列上按顺序滑动的。
因为TCP协议是全双工协议，所以双方都有一个发送缓冲区和接收缓冲区。
发送缓冲区接收来自应用层的数据（一长条字节流？），而发送窗口框住了其中的一部分（前面说了，窗口其实是一段范围）。
发送缓存区相关的四个概念：
1. 已发送并受到确认
2. 已发送但未收到确认
3. 允许发送但未发送
4. 不允许发送
其中，允许发送的数据都在发送窗口内。每次成功发送数据之后，发送窗口就会在发送缓冲区中按顺序移动，将新的数据包含到窗口中准备发送。
下面，我借由计算机网络（谢希仁）中的图片来讲解一下过程(后来发现copy率达到99.9%)：
A B 双方在建立TCP连接的时候，B就已经向A给出了自己的窗口值，发送方A会根据这个值来构造自己的发送窗口。
发送窗口表示：在没有收到B的确认情况下，A可以连续把发送窗口中的数据都发送出去。凡是发送过的数据在未收到确认前都应留在发送窗口内，以便超时重传。
发送窗口的位置由前沿和后沿的位置来确定：
1. 前沿：不动或前移。不动，可能是因为没有收到确认，或收到了确认但接受窗口缩小了。
2. 后沿：不动或前移。
A发送了11个字节的数据，但未收到新的确认，所以前沿后沿都不变，即发送窗口的位置不变。
看B的接收窗口，32 33 未按序到达，因为接收方发送的确认号ack是由按序到达数据的最高序号决定的，所以B返回的确认号仍然是31。导致了A的发送窗口不变。
描述一个发送窗口的状态需要三个指针：p1、p2、p3。
1. 小于p1：已发送且已收到确认的部分
2. 大于p3：不允许发送的部分
3. p3 - p1：发送窗口
4. p2 - p1：已发送但未收到确认的部分
5. p3 - p2：允许发送但未发送的部分，又叫“可用窗口”、“有效窗口”
B 收到了31，然后返回确认号34，表明31 32 33 都收到了，且已交付主机。A收到确认号后，发送窗口前移，后沿前移3位指向34。指针p2不动，可用窗口变大，可发送42-53的数据。
42-53的数据都被发送了出去，p2指针与p3指针重合，但是没有收到确认，使得可用窗口为0，A不能再发送数据，必须等到B的确认。但是B发送的确认可能在网络中延时了，没有及时到达，A就会一直等，B也会一直等待A发送数据，造成死锁。所以A有一个超时计时器机制，一段时间后没有收到B的确认，会自动重传这部分数据并重置超时计时器，直到收到B的确认为止。
三、如何控制
流量控制主要依靠滑动窗口来实现
流量控制即接收方B向发送方A传递消息，使其不要发送太快～，是一种端到端的控制。利用B返回的报文中的接收窗口的大小来控制A的发送窗口大小。rwnd: 接收窗口</description>
    </item>
    
  </channel>
</rss>