<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>狐耳的雪原 on 狐耳的雪原</title>
    <link>https://hueralin.github.io/</link>
    <description>Recent content in 狐耳的雪原 on 狐耳的雪原</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Jul 2019 14:37:19 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Git pull 的使用</title>
      <link>https://hueralin.github.io/2019/gitpull/</link>
      <pubDate>Tue, 23 Jul 2019 14:37:19 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/gitpull/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;语法：git pull &amp;lt;选项&amp;gt; &amp;lt;远程主机名&amp;gt; &amp;lt;远程分支名&amp;gt;:&amp;lt;本地分支名&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;注意：和git push的语法顺序稍有不同&lt;br /&gt;
git push 的语法为：&lt;code&gt;git pull &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支名&amp;gt;:&amp;lt;远程分支名&amp;gt;&lt;/code&gt;&lt;br /&gt;
git pull 意为从远程分支的最新版本拉取下来并于本地分支合并&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git pull origin master:dev&lt;/code&gt; 将origin的master分支拉取并合并到本地的dev分支&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin master&lt;/code&gt;  省略了本地分支名，即拉取并合并到本地分支&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin&lt;/code&gt;  若有 某远程分支与当前分支有追踪关系，则远程分支名也可以省略&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt; 若只有一个远程主机，且只有一个远程分支与当前分支有追踪关系，则可以直接git pull&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;git pull相当于git fetch和git merge的简写&lt;br /&gt;
比如：&lt;code&gt;git pull origin dev&lt;/code&gt; 相当于 &lt;code&gt;git fetch origin dev&lt;/code&gt; + &lt;code&gt;git merge origin/dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;未完待续&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fork工作流</title>
      <link>https://hueralin.github.io/2019/fork/</link>
      <pubDate>Tue, 23 Jul 2019 10:34:46 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/fork/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Fork工作流  实现协同开发&lt;/strong&gt;&lt;br /&gt;
作为实习新人，在参与公司项目的开发时被要求使用Fork工作流，Fork工作流实际上就是从GitHub上fork一个原仓库，并与原仓库代码保持同步的一种工作方式。&lt;br /&gt;
Fork工作流不再是只有一个中央代码库，而是给予每个人一个远程仓库（origin），外加一个唯一的中央仓库（upstream，或称为官方仓库）。点击Fork时就会生成一个自己的远程仓库，每次开发者提交时都会先将自己的贡献提交到origin，然后发起一个Pull Request请求给中央仓库，中央仓库的管理者会决定是否将你的代码提交到中央仓库，其他人都没这个权限。这使得管理者可以接受任何人的提交，而不需要给它们中央仓库的权限。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;具体流程&lt;/strong&gt;&lt;br /&gt;
1. 从原仓库fork到自己的origin&lt;br /&gt;
2. &lt;code&gt;git clone xxxxxx&lt;/code&gt; 将origin克隆到本地&lt;br /&gt;
3. &lt;code&gt;git remote add upstream xxxxx&lt;/code&gt;  指向上游仓库，即原仓库&lt;br /&gt;
4. &lt;code&gt;git checkout -b feature-xx origin/dev&lt;/code&gt; 从远程分支检出本地分支进行开发&lt;br /&gt;
5. 开发、修改。。。。提交。。。&lt;br /&gt;
6. &lt;code&gt;git push origin feature-xx&lt;/code&gt; 将本地feature分支push到origin&lt;br /&gt;
7. 发起Pull Request请求管理员合并&lt;br /&gt;
8. 上述合并可能会导致冲突，因为本地仓库可能比较旧了，需要更新&lt;br /&gt;
9. &lt;code&gt;git checkout dev&lt;/code&gt; 切回dev分支&lt;br /&gt;
10. &lt;code&gt;git pull upstream dev&lt;/code&gt; 从原仓库拉取dev分支的最新版本,更新本地的dev分支&lt;br /&gt;
11. &lt;code&gt;git checkout -b feature-merge-dev dev&lt;/code&gt; 从更新后的本地dev检出合并分支，并切换为该分支&lt;br /&gt;
12. &lt;code&gt;git merge feature-xx&lt;/code&gt; 合并你的修改，即feature-xx分支上的内容&lt;br /&gt;
13. &lt;code&gt;git branch -m feature-merge-dev feature-xx&lt;/code&gt; 将合并分支改名为feature-xx 覆盖原分支&lt;br /&gt;
14. &lt;code&gt;git push origin feature-xx&lt;/code&gt; push后再Pull Request就不会发生冲突了&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git push 的使用</title>
      <link>https://hueralin.github.io/2019/gitpush/</link>
      <pubDate>Mon, 22 Jul 2019 14:32:37 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/gitpush/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;语法：git push &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支名&amp;gt; ：&amp;lt;远程分支名&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;git push origin master&lt;/strong&gt;&lt;br /&gt;
最常用的一个写法，忽略了远程分支名，将本地master分支推送到origin中与之有追踪关系的对应分支（通常同名），若没有则创建一个对应的远程分支。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git push origin :master&lt;/strong&gt;&lt;br /&gt;
忽略了本地分支名，意味着要推送一个本地的空分支到指定远程分支，即删除指定的远程分支，相当于&lt;code&gt;git push origin --delete master&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git push origin&lt;/strong&gt;&lt;br /&gt;
如果当前分支和远程分支存在对应关系，则两个分支名都可省略掉，直接推送当前分支到对应的远程分支。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git push&lt;/strong&gt;&lt;br /&gt;
如果只有一个远程主机，且只有一个与当前分支对应的远程分支，那么就可以全都省略，直接git push。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git push -u origin master&lt;/strong&gt;&lt;br /&gt;
如果对应多个远程主机，-u 则指定一个默认主机，以后就可以直接使用&lt;code&gt;git push&lt;/code&gt;推送当前分支到远程对应分支。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git push &amp;ndash;all origin&lt;/strong&gt;&lt;br /&gt;
不管是否存在对应的远程分支，将本地的所有分支全部推上去。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git push &amp;ndash;force origin&lt;/strong&gt;&lt;br /&gt;
一般情况下本地仓库比远程仓库旧的话会要求你先&lt;code&gt;git pull&lt;/code&gt;进行更新，而 &amp;ndash;force 表明不要更新，直接推上去。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git push origin &amp;ndash;tags&lt;/strong&gt;&lt;br /&gt;
不推送分支，只推送标签。&lt;br /&gt;
&amp;mdash;&lt;br /&gt;
&lt;strong&gt;关于追踪关系&lt;/strong&gt;&lt;br /&gt;
追踪即本地分支跟进远程分支的变化，用于push、pull、merge等&amp;hellip;&lt;br /&gt;
&lt;em&gt;追踪远程分支&lt;/em&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone&lt;/code&gt; 一般克隆下来的项目将自动创建master分支，并且自动关联到远程的master分支上&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -u 远程主机/远程分支名 本地分支名&lt;/code&gt; 设置本地分支跟踪远程分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b 本地分支名 远程主机/远程分支名&lt;/code&gt; 从远程分支中签出本地分支&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -vv&lt;/code&gt; 查看本地分支和远程分支的跟踪关系&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>用webpack搭建简易的React应用</title>
      <link>https://hueralin.github.io/2019/createreactwithwebpack/</link>
      <pubDate>Sun, 21 Jul 2019 00:19:54 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/createreactwithwebpack/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Emmm,步骤清单😂&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm init -y&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm i webpack webpack-cli webpack-dev-server --save&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm i react react-dom --save&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;npm i babel-core babel-preset-es2015 babel-preset-react --save-dev&lt;/code&gt;&lt;br /&gt;
需要安装的包差不多就这些了，接下来配置webpack.config.js文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports = {
    entry: &amp;quot;./index.jsx&amp;quot;,
    output: {
        path: __dirname + &amp;quot;/public&amp;quot;,
        filename: &amp;quot;bundle.js&amp;quot;
    },
    module: {
        rules: [
            {
                test: /\.jsx$/,
                loader: &amp;quot;babel-loader&amp;quot;
            }
        ]
    },
    devServer: {
        contentBase: &amp;quot;./&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在package.json文件中添加脚本&lt;br /&gt;
5.1. &lt;code&gt;&amp;quot;build&amp;quot;: &amp;quot;webpack&amp;quot;&lt;/code&gt;打包&lt;br /&gt;
5.2. &lt;code&gt;&amp;quot;dev&amp;quot;: &amp;quot;webpack-dev-server --open --inline&amp;quot;&lt;/code&gt;启动测试服务器&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在package.json文件里配置&lt;code&gt;&amp;quot;babel&amp;quot;: {&amp;quot;presets&amp;quot;: [&amp;quot;es2015&amp;quot;, &amp;quot;react&amp;quot;]}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;运行下试试？？？ Emmm，这个代码块有点丑啊😂&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>搭个窝，储点儿粮，准备过冬！</title>
      <link>https://hueralin.github.io/2019/life20190720/</link>
      <pubDate>Sat, 20 Jul 2019 23:28:34 +0800</pubDate>
      
      <guid>https://hueralin.github.io/2019/life20190720/</guid>
      <description>&lt;p&gt;今天总算把我的小窝搭建起来了，hugo + github pages 还真不错，感谢该hugo主题的作者，UI很好看。
为什么要放在GiHub上而不是自己前后端+服务器啥的一通瞎搞呢？记得有人说过，刚开始做博客的时候大包大揽，前后端都自己做，确实考验技术也很有成就感，或许也是一时兴起，刚接触博客，饶有趣味，可后来操心太多，可能还会修复bug，还不时续费维护，那时才想起来，”我就是要发篇博客嘛，那么麻烦干什么，都不能专心写作了“，于是github静态博客成了首选（毕竟CSDN、博客园、简书啥的不能定制），通过简单的Markdown语法+GitHub基础就可以发布一篇博客了，岂不美哉～ 可以在该博客上发发技术文章，也可以记录学习和生活，简简单单，专心写作。今天也算是里程碑的一天吧，有此博客就像在北京有了一套房（哈哈哈😂，有些夸张～），实习的日子，加油！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>